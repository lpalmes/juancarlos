name: CI

on: [push, pull_request]

jobs:
  rust-tests:
    name: Rust Tests (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    working-directory: lsp
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.61.0
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  rust-lint:
    name: Rust Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-04-01
          override: true
          components: rustfmt
      - name: "rustfmt"
        run: grep -r --include "*.rs" --files-without-match "@generated" crates | xargs rustfmt --check --config="skip_children=true"
        working-directory: ./lsp/

  build-compiler:
    name: Build Rust Compiler (${{ matrix.target.os }})
    strategy:
      matrix:
        target:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            build-name: juan-carlos
            artifact-name: juan-carlos-bin-linux-x64
            packages: musl-tools
            features: vendored
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            build-name: juan-carlos
            artifact-name: juan-carlos-bin-linux-arm64
            features: vendored
            cross: true
          - target: x86_64-apple-darwin
            os: macos-latest
            build-name: juan-carlos
            artifact-name: juan-carlos-bin-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            build-name: juan-carlos
            artifact-name: juan-carlos-bin-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            build-name: juan-carlos.exe
            artifact-name: juan-carlos-bin-win-x64
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.61.0
          override: true
          target: ${{ matrix.target.target }}
      - name: Install packages
        if: matrix.target.os == 'ubuntu-latest' && matrix.target.packages
        run: sudo apt install ${{ matrix.target.packages }} -y
      - name: Install cross
        if: matrix.target.cross
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cross
      # Current published version of cross only works correctly if run from compiler directory
      # See related issue https://github.com/cross-rs/cross/issues/615
      # actions-rs/cargo@v1 does not support this option https://github.com/actions-rs/cargo/pull/59
      # Either we need to install cross from git or manually run cargo / cross instead of using action
      - name: Build project
        working-directory: lsp
        run: ${{ matrix.target.cross && 'cross' || 'cargo' }} build --release --target ${{ matrix.target.target }} ${{ matrix.target.features && '--features' }} ${{ matrix.target.features }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target.artifact-name }}
          path: lsp/target/${{ matrix.target.target }}/release/${{ matrix.target.build-name }}

  main-release:
    name: Publish to NPM
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.repository == 'lpalmes/juan-carlos'
    needs: [rust-tests, build-compiler]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
          registry-url: https://registry.npmjs.org/
          cache: "yarn"
      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-scripts
      - name: Download artifact relay-bin-linux-x64
        uses: actions/download-artifact@v2
        with:
          name: relay-bin-linux-x64
          path: artifacts/linux-x64
      - name: Download artifact relay-bin-linux-arm64
        uses: actions/download-artifact@v2
        with:
          name: relay-bin-linux-arm64
          path: artifacts/linux-arm64
      - name: Download artifact relay-bin-macos-x64
        uses: actions/download-artifact@v2
        with:
          name: relay-bin-macos-x64
          path: artifacts/macos-x64
      - name: Download artifact relay-bin-macos-arm64
        uses: actions/download-artifact@v2
        with:
          name: relay-bin-macos-arm64
          path: artifacts/macos-arm64
      - name: Download artifact relay-bin-win-x64
        uses: actions/download-artifact@v2
        with:
          name: relay-bin-win-x64
          path: artifacts/win-x64
      - name: Mark binaries as executable
        working-directory: artifacts
        run: |
          chmod +x linux-x64/relay
          chmod +x linux-arm64/relay
          chmod +x macos-x64/relay
          chmod +x macos-arm64/relay
      - name: Build latest (main) version
        if: github.ref == 'refs/heads/main'
        run: yarn gulp mainrelease
        env:
          RELEASE_COMMIT_SHA: ${{ github.sha }}

      - name: Build release version
        if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
        run: yarn gulp release

      - name: Publish to npm
        if: github.ref == 'refs/heads/main' || github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
        run: |
          for pkg in dist/*; do
            npm publish "$pkg" ${TAG}
          done
        env:
          TAG: ${{ github.ref == 'refs/heads/main' && '--tag=main' || ((contains(github.ref_name, '-rc.') && '--tag=dev') || '' )}}
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
